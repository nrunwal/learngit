package utill;/*@shubsing * Contains all utility methods used in the any or all of the test cases. * Any new utility methods should be added here only. * This class is extended by all of the testNG test cases. */import java.awt.AWTException;import java.awt.Rectangle;import java.awt.Toolkit;import java.awt.datatransfer.Clipboard;import java.awt.datatransfer.StringSelection;import java.awt.event.KeyEvent;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.net.URL;import java.sql.Timestamp;import java.util.ArrayList;import java.util.List;import java.util.Random;import java.util.concurrent.ThreadLocalRandom;import javax.imageio.ImageIO;import org.apache.commons.io.FileUtils;import org.jdom2.JDOMException;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import org.openqa.selenium.By;import org.openqa.selenium.Capabilities;import org.openqa.selenium.JavascriptExecutor;import org.openqa.selenium.NoSuchElementException;import org.openqa.selenium.OutputType;import org.openqa.selenium.Point;import org.openqa.selenium.StaleElementReferenceException;import org.openqa.selenium.TakesScreenshot;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.interactions.Actions;import org.openqa.selenium.internal.Locatable;import org.openqa.selenium.remote.RemoteWebDriver;import org.sikuli.script.FindFailed;import org.sikuli.script.Match;import org.sikuli.script.Pattern;import org.sikuli.script.Screen;import org.sikuli.script.ScreenImage;import org.testng.Assert;import com.relevantcodes.extentreports.ExtentReports;import com.relevantcodes.extentreports.ExtentTest;import com.relevantcodes.extentreports.LogStatus;import com.testautomationguru.utility.CompareMode;import com.testautomationguru.utility.PDFUtil;public class Generic {	public static HtmlWriter writer = null;	public static FileOutputStream fos = null;	public static ExtentReports Report;	public static ExtentTest Test;	public static WebUtill Web;	public static DataHandler Xml;	public static WebDriver Driver;	public static Process process;	public static String CURRENTBROWSER;	public static String CURRENTOS;	public static String FlashVersion = null;	public static boolean IsDebug;	public static String OsVersion;	public static String CpuArchitecture;	public static String PlayerType;	public static SocketManager sockMan = null;	public static String FlashBranch;	public static String BrowserBit;	public static String BuildName;	public static int totalPass;	public static int totalFail;	public static int totalSkipped;	public static String MachineName;	public static String OutputPath;	public static boolean IsDriverFailure = false;	public static String OSversionTag = null;	public static String BaselinePath = null;	public static String CurrentTestBaselinePath = null;	public static String tofuRunId;	public static String capturedImg = new String();	public static int xOffset, yOffset;	// Extents report to keep track of logging.	public static ExtentReports reporter() {		String filepath = Generic.getOutputPath() + File.separator + "ExecutionReport.html";		Report = new ExtentReports(filepath, false);		System.out.println(filepath);		return Report;	}	public static ExtentTest logger(ExtentReports report, String TCName, String discription) {		Test = report.startTest(TCName, discription);		return Test;	}	public static void logger(ExtentTest logger, String msg, String LogType) {		if (LogType.equalsIgnoreCase("I")) {			logger.log(LogStatus.INFO, msg);		} else if (LogType.equalsIgnoreCase("P")) {			logger.log(LogStatus.PASS, msg);		} else if (LogType.equalsIgnoreCase("F")) {			logger.log(LogStatus.FAIL, msg);		} else if (LogType.equalsIgnoreCase("E")) {			logger.log(LogStatus.ERROR, msg);		}	}	// End	// This is extracted from the Source testNG files.	public static void setcurrentBR(String browser) {		CURRENTBROWSER = browser;	}	public static void setcurrentOS(String OS) {		CURRENTOS = OS;	}	public static String currentBR() {		return CURRENTBROWSER;	}	public static String currentOS() {		return CURRENTOS;	}	// End	// This is the arguments i.e. the Flash version that we want	public static void setBuildName(String Name) {		BuildName = Name;	}	public static String getBuildName() {		return BuildName;	}	// End	// The actual values are all collected via XML returned in SocketManager	// class.	// This is the actual Flash version that is installed on the browser.	public static void setFlashVersion(String Version) {		FlashVersion = Version;	}	public static String getFlashVersion() {		return FlashVersion;	}	// End	// Debugger or Release	public static void setIsdebug(boolean Value) {		IsDebug = Value;	}	public static boolean getIsdebug() {		return IsDebug;	}	// End	// ActiveX or PlugIN	public static void setPlayerType(String Version) {		PlayerType = Version;	}	public static String getPlayerType() {		return PlayerType;	}	// End	public static void setOsVersion(String Version) {		OsVersion = Version;	}	public static String getOsVersion() {		return OsVersion;	}	// This is set in TestStatistics.java from the testNG results. Used in	// creation of the xml which is to be pushed.	public static void settotalPass(int a) {		totalPass = a;	}	public static void settotalFail(int a) {		totalFail = a;	}	public static void settotalskipped(int a) {		totalSkipped = a;	}	public static int gettotalPass() {		return totalPass;	}	public static int gettotalFail() {		return totalFail;	}	public static int gettotalSkipped() {		return totalSkipped;	}	// End	public static void setMachineName(String S) {		MachineName = S;	}	public static String getMachineName() {		return MachineName;	}	// The folder path that conatins all the output files i.e.	// Html.xml,Executionreport.html,actualImages,Screenshot and the testNG	// output files	// /HTML_LOGS/Timestamp/	public static void setOutputPath(String str) {		OutputPath = str;	}	public static String getOutputPath() {		return OutputPath;	}	// End	// This is the path of the baselines specific to current OS-browser	// combinations are downloaded and stored.	public static void setBaselinePath() {		String O = Generic.getOsVersion().replaceAll("\\s", "");		String s = O;		System.out.println("O =" + O);		if (CURRENTOS.equals("mac")) {			// O=O.substring(0,10).replaceAll(".","_");			// s=O.replaceAll("","_");			s = O.replace('.', '_');			String temp = s.substring(0, 10);			s = temp;		}		System.out.print("Os" + s);		BaselinePath = "HTML_Suite_Baselines" + File.separator + Generic.CURRENTOS + File.separator + s + "_"				+ Generic.CURRENTBROWSER;		System.out.println("BaselinePath=" + BaselinePath);	}	public static String getBaselinePath() {		return BaselinePath;	}	// End	// The baseline path is changed as per Current Executing test case.	public static void setCurrentTestBaselinePath(String name) {		CurrentTestBaselinePath = BaselinePath + File.separator + name;	}	public static String getCurrentTestBaselinePath() {		return CurrentTestBaselinePath;	}	// This is used to send Email accordingly	public static void setDriverFailure(boolean b) {		IsDriverFailure = b;	}	public static boolean getDriverFailure() {		return IsDriverFailure;	}	public static String getCpuArchitecture() {		String realArch = "";		if (CURRENTOS.equals("mac")) {			realArch = System.getProperty("os.arch");		} else {			String arch = System.getenv("PROCESSOR_ARCHITECTURE");			String wow64Arch = System.getenv("PROCESSOR_ARCHITEW6432");			realArch = arch.endsWith("64") || wow64Arch != null && wow64Arch.endsWith("64") ? "64" : "32";		}		return realArch;	}	// The Path where the captured images/actualImages are pushed.	public static String getactualServerPath() {		return "http://fpqa.macromedia.com/Ullu/NeedsHTMLValidation/";	}	// The Path where the baselines are present on the server.	public static String getbaselineServerPath() {		return "http://fpqa.macromedia.com/ullu/UlluBaselines/";	}	// The network location of the captured images /actualImages are pushed.	public static String getactualsrcPath() {		return "\\\\\\\\fpstorage2.macromedia.com\\\\UlluRoot\\\\NeedsHTMLValidation\\\\";	}	// The network location of the baseline images..	public static String getfpstorageDestinationpath() {		return "\\\\\\\\fpstorage2.macromedia.com\\\\UlluRoot\\\\UlluBaselines\\\\";	}	public static String getbrowserVersion() {		try {			Capabilities caps = ((RemoteWebDriver) Driver).getCapabilities();			String browserVersion = caps.getVersion();			return browserVersion;		} catch (Exception e) {			return null;		}	}	// The Flash branch is set from the arguments given to the suite.	public static void setFlashbranch(String value) {		FlashBranch = value.substring((value.indexOf('-')) + 1);		System.out.println("FlashBranch = " + FlashBranch);	}	public static String getFlashbranch() {		return FlashBranch;	}	// This is set from the arguments given to the suite.	public static void setBrowserBits(String bit) {		BrowserBit = bit;	}	public static String getBrowswerBits() {		return BrowserBit;	}	// Generating a random number based on current Timestamp to serve as	// tofurunid.	public static double getJavaVersion() {		String version = System.getProperty("java.version");		int pos = version.indexOf('.');		pos = version.indexOf('.', pos + 1);		return Double.parseDouble(version.substring(0, pos));	}	public static void setTofuRunID() {		double JAVA_VERSION = Generic.getJavaVersion();		System.out.println("Java_Version=" + JAVA_VERSION);		int max = 99999999;// 6 digit number		int min = 100000;		Random rand = new Random();		if (JAVA_VERSION < 1.7) {			int randomNum = rand.nextInt((max - min) + 1) + min;			tofuRunId = Integer.toString(randomNum);			// Date date=new Date();			Timestamp timestamp = new Timestamp(System.currentTimeMillis());			System.out.println(timestamp.getTime());		} else if (JAVA_VERSION >= 1.7) {			int randomNum = ThreadLocalRandom.current().nextInt(min, max + 1);			tofuRunId = Integer.toString(randomNum);		} else {			Random ran = new Random();			int code = (100000 + ran.nextInt(900000));			tofuRunId = Integer.toString(code);		}	}	public static String getTofuRunID() {		return tofuRunId;	}	// End	// Function to append Html.xml after failure of each test case.	public static void appendxml(String expImage, String actImagePath1, String methodName) {		String actImagePath = actImagePath1;		if (actImagePath1.isEmpty()) {			actImagePath = "Screenshot" + File.separator + methodName + ".png";		}		System.out.println("Actual Image Path = " + actImagePath1);		if (actImagePath1.contains("TC_")) {			int index1 = actImagePath1.indexOf("TC_");			actImagePath = actImagePath1.substring(index1);		}		String bline = methodName.toUpperCase() + "_" + expImage.substring(expImage.lastIndexOf(File.separator) + 1);		String actual = Generic.getactualServerPath() + Generic.getTofuRunID() + File.separator + "HTML_BITMAPS"				+ File.separator + actImagePath;		String baseline = Generic.getbaselineServerPath() + expImage + ".png";		String actSrcPath = Generic.getactualsrcPath() + Generic.getTofuRunID() + File.separator + "HTML_BITMAPS"				+ File.separator + actImagePath;		String fpstoragePath = Generic.getfpstorageDestinationpath()				+ expImage.substring(0, expImage.lastIndexOf(File.separator));		fpstoragePath = fpstoragePath.replace("/", "\\");		String p4DestinationPath = fpstoragePath;		String ats = "HTML";		String addorEdit = "edit";		System.out.println("Appending HTML xml");		try {			Generic.writer.addElement(bline, actual, baseline, actSrcPath, p4DestinationPath, fpstoragePath, addorEdit,					ats);		} catch (Exception e) {			System.out.println("Could not Add element :" + actual);			e.printStackTrace();		}	}	// End	// Function that matches Installed FP version with the one given in the	// arguments.	public static boolean IsFlashVersionCorrect() {		String actualFlashVersion = Generic.getFlashVersion();// WIN 24,0,0,194		String acVersion[] = actualFlashVersion.split(" ")[1].split(",");// 24,0,0,194		String buildName = Generic.getBuildName();// Play_24_0_r0_194		String bName[] = buildName.split("_");		boolean isVersionMatches = bName[1].equals(acVersion[0]) && bName[2].equals(acVersion[1])				&& bName[4].equals(acVersion[3]) && bName[3].endsWith(acVersion[2]);		System.out.println("isVersion" + isVersionMatches);		return isVersionMatches;	}	// End	// Generic functions for Printing	/////////////////// Print//////////////	@SuppressWarnings("static-access")	public static void upload(String TCID)			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		Generic.setCurrentTestBaselinePath("TC_print");		String osName = currentOS();		Screen screen = new Screen();		if (osName.contains("WIN") || osName.contains("win")) {			Pattern Win_OpenBtn = new Pattern(Web.getImageElement("Win_OpenBTn"));			String locationName = new File("Assets" + File.separator + "testNG.xml").getAbsolutePath();			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			MyRobot.getInstance().delay(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_CONTROL);			MyRobot.getInstance().keyPress(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_CONTROL);			Thread.sleep(1000);			Match match = screen.exists(Win_OpenBtn);			Assert.assertNotNull(match, " 'Win Upload' OPEN Btn is not recognize ");			screen.click(Win_OpenBtn);			Thread.sleep(5000);		} else {			if (osName.contains("MAC") || osName.contains("mac")) {				Thread.sleep(500);				String locationName = new File("Assets" + File.separator + "testNG.xml").getAbsolutePath();				System.out.println("Lname " + locationName);				Thread.sleep(1000);				StringSelection stringSelection = new StringSelection(locationName);				Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();				clipboard.setContents(stringSelection, stringSelection);				System.out.println("locationName: " + locationName);				Thread.sleep(1000);				MyRobot.getInstance().keyPress(KeyEvent.VK_META);				MyRobot.getInstance().keyPress(KeyEvent.VK_SHIFT);				MyRobot.getInstance().keyPress(KeyEvent.VK_G);				MyRobot.getInstance().delay(500);				MyRobot.getInstance().keyRelease(KeyEvent.VK_G);				MyRobot.getInstance().keyRelease(KeyEvent.VK_SHIFT);				MyRobot.getInstance().keyRelease(KeyEvent.VK_META);				MyRobot.getInstance().delay(500);				Thread.sleep(1000);				MyRobot.getInstance().keyPress(KeyEvent.VK_BACK_SPACE);				MyRobot.getInstance().keyRelease(KeyEvent.VK_BACK_SPACE);				Thread.sleep(2000);				screen.type(locationName);				Thread.sleep(2000);				Pattern goBTN = new Pattern(Web.getImageElement("mac_go"));				Pattern Mac_OpenBtn = new Pattern(Web.getImageElement("Mac_upload_open_Btn"));				Match match4 = screen.exists(goBTN);				Assert.assertNotNull(match4, " 'Print Mac' Go BTN is not recognized ");				screen.click(goBTN);				Thread.sleep(1000);				Match match = screen.exists(Mac_OpenBtn);				Assert.assertNotNull(match, " 'MAC Upload' OPEN Btn is not recognize ");				screen.click(Mac_OpenBtn);				Thread.sleep(5000);			}			logger(Test, "Upload Complete !!!", "I");		}		Generic.setCurrentTestBaselinePath(TCID);	}	@SuppressWarnings("static-access")	public static void robotClick()			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		//String osName = currentOS();		MyRobot.getInstance().delay(500);		MyRobot.getInstance().mouseMove(80, 140);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().mousePress(java.awt.event.InputEvent.BUTTON1_MASK);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().mouseRelease(java.awt.event.InputEvent.BUTTON1_MASK);		Thread.sleep(5000);		System.out.println("Mouse Instance Clicked on the co ordinates 80,140 ");	}		@SuppressWarnings("static-access")	public static void nullMatchCase (String expImage,Match match, Screen screen) throws FindFailed, IOException, InterruptedException {		//String osName = currentOS();		System.out.println("Inside Match Function");		int count=0;		while(match==null){			Driver.navigate().refresh();			Thread.sleep(2000);			match = screen.exists(new Pattern(expImage));			count++;			if(count>5){				System.out.println("Breaking fromt he loop as it has breached the maximum time ");				break;			}		}	}	@SuppressWarnings("static-access")	public static void robotRightClick()			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		//String osName = currentOS();		MyRobot.getInstance().delay(500);		MyRobot.getInstance().mousePress(java.awt.event.InputEvent.BUTTON3_DOWN_MASK);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().mouseRelease(java.awt.event.InputEvent.BUTTON3_DOWN_MASK);		Thread.sleep(5000);		System.out.println("Mouse Instance Right Clicked");	}	@SuppressWarnings("static-access")	public static void SettingsCloseClick()			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		MyRobot.getInstance().keyPress(KeyEvent.VK_SHIFT);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyPress(KeyEvent.VK_TAB);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyRelease(KeyEvent.VK_TAB);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyPress(KeyEvent.VK_TAB);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyRelease(KeyEvent.VK_TAB);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyPress(KeyEvent.VK_ENTER);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyRelease(KeyEvent.VK_ENTER);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyRelease(KeyEvent.VK_SHIFT);		System.out.println("Close Settings Clicked");	}	@SuppressWarnings("static-access")	public static void flashSettingsClick()			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyPress(KeyEvent.VK_S);		MyRobot.getInstance().keyRelease(KeyEvent.VK_S);		Thread.sleep(500);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyPress(KeyEvent.VK_S);		MyRobot.getInstance().keyRelease(KeyEvent.VK_S);		Thread.sleep(500);		MyRobot.getInstance().delay(500);		MyRobot.getInstance().keyPress(KeyEvent.VK_ENTER);		MyRobot.getInstance().keyRelease(KeyEvent.VK_ENTER);		Thread.sleep(500);		System.out.println("Settings Clicked");	}	@SuppressWarnings("static-access")	public static void SettingsManager()			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		robotClick();		robotRightClick();		flashSettingsClick();		SettingsCloseClick();		System.out.println("Settings were performed successfully");	}	//ImageAnimation	public static int ImageAnimation(WebElement ele, String page, String TC_Name) throws InterruptedException, IOException {		// TODO Auto-generated method stub		Match match = null;		Screen screen;		boolean testPass;		String expImage;		String actImagePath;		screen = new Screen();		String[] expImage1 = new String[6];		String[] actImage = new String[6];		List<Pattern> pobj = new ArrayList<Pattern>();		for (int i = 1; i <= 5; i++) {			actImage[i] = getSeleniumSnap(ele, TC_Name, "Screen"+page+i);			Thread.sleep(500);			expImage1[i] = Web.getImageElement("Screen"+page+i);			logger(Test, " Baseline Image found" + i, "I");			pobj.add(new Pattern(expImage1[i]));			expImage = expImage1[i];		}		System.out.println("Ready for loop");		int c = 1;		int wait = 20;		for (Pattern pobj1 : pobj) {			System.out.println("Inside for loop");			match = screen.exists(pobj1, wait * c);			System.out.println(match);			Assert.assertNotNull(match, "BaseLine image " + c + " is not matched from Screen Image");			int x = match.getX();			int y = match.getY();			int h = match.getH();			int w = match.getW();			System.out.println(x + " " + y + " " + h + " " + w);			actImagePath = getActualSnapper(screen, TC_Name, x, y, w, h, TC_Name+page+"_" + c);			logger(Test, "Actual Snap" + c + "is captured", "I");			System.out.println("actImage:-" + actImagePath);			logger(Test, "Animation Test case. Hence Step 2 matching is skipped. ", "I");			c++;		}		Assert.assertTrue(c == 6, TC_Name+" failed with  " + (6 - c) + "  failed imageMatches.");		return c;	}	public static void print(String TC_Name)			throws FindFailed, InterruptedException, AWTException, JDOMException, IOException {		String osName = currentOS();		if (osName.contains("MAC") || osName.contains("mac")) {			macPrint(TC_Name);		} else {			winPrint(TC_Name);		}		Generic.setCurrentTestBaselinePath(TC_Name);	}	@SuppressWarnings("static-access")	public static void winPrint(String TC_Name)			throws InterruptedException, FindFailed, AWTException, JDOMException, IOException {		Generic.setCurrentTestBaselinePath("TC_print");		Pattern Win_fileName = new Pattern(Web.getImageElement("Win_fileName"));		Pattern Win_saveBTN = new Pattern(Web.getImageElement("Win_saveBTN"));		Thread.sleep(1000);		Screen screen = new Screen();		String locationName = null;		if (((RemoteWebDriver) Driver).getCapabilities().getBrowserName().equalsIgnoreCase("chrome")) {			Pattern changeBTN = new Pattern(Web.getImageElement("CH_ChangeBTN"));			Pattern Save_as_PDF = new Pattern(Web.getImageElement("CH_Save_as_PDF"));			Pattern saveBTN = new Pattern(Web.getImageElement("CH_saveBTN"));			Thread.sleep(2000);			Match match = screen.exists(changeBTN);			Assert.assertNotNull(match, " 'CHROME Print' Change BTN is not recognize ");			screen.click(changeBTN);			Thread.sleep(2000);			Match match1 = screen.exists(Save_as_PDF);			Assert.assertNotNull(match1, " 'CHROME Print' Save As PDF BTN is not recognized ");			screen.click(Save_as_PDF);			Thread.sleep(1000);			Match match2 = screen.exists(saveBTN);			Assert.assertNotNull(match2, " 'CHROME Print' Save BTN is not recognized ");			screen.click(saveBTN);			Thread.sleep(500);			locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TC_Name + ".pdf")					.getAbsolutePath();			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			MyRobot.getInstance().delay(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_CONTROL);			MyRobot.getInstance().keyPress(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_CONTROL);			Thread.sleep(1000);		} else if (((RemoteWebDriver) Driver).getCapabilities().getBrowserName()				.equalsIgnoreCase("internet explorer")) {			Pattern IEPrint = new Pattern(Web.getImageElement("Win_IE_Print"));			Thread.sleep(2000);			Match match = screen.exists(IEPrint);			Assert.assertNotNull(match, " 'IE Print' Win_IE_Print BTN is not recognize ");			screen.click(match);			Thread.sleep(2000);			locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TC_Name + ".pdf")					.getAbsolutePath();			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			MyRobot.getInstance().delay(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_CONTROL);			MyRobot.getInstance().keyPress(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_CONTROL);			Thread.sleep(1000);		} else if (((RemoteWebDriver) Driver).getCapabilities().getBrowserName().equalsIgnoreCase("firefox")) {			Pattern firefoxOK = new Pattern(Web.getImageElement("Win_Firefox_OK"));			Match match = screen.exists(firefoxOK);			Assert.assertNotNull(match, " 'Firefox Print' OK BTN is not recognize ");			screen.click(firefoxOK);			Thread.sleep(2000);			locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TC_Name + ".pdf")					.getAbsolutePath();			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			MyRobot.getInstance().delay(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_CONTROL);			MyRobot.getInstance().keyPress(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_CONTROL);			Thread.sleep(1000);		} else if (((RemoteWebDriver) Driver).getCapabilities().getBrowserName().equalsIgnoreCase("MicrosoftEdge")) {			Pattern EdgePrint = new Pattern(Web.getImageElement("Win_Edge_Print"));			Pattern EdgeSave = new Pattern(Web.getImageElement("Win_Edge_Save"));			Match match = screen.exists(EdgePrint);			Assert.assertNotNull(match, " 'Edge Print' Win_Edge_Print is not recognize ");			screen.click(match);			Thread.sleep(2000);			locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TC_Name + ".pdf")					.getAbsolutePath();			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			MyRobot.getInstance().delay(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_CONTROL);			MyRobot.getInstance().keyPress(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_CONTROL);			Thread.sleep(1000);		}		Thread.sleep(1000);		Match match = screen.exists(Win_saveBTN);		Assert.assertNotNull(match, "Win Save BTN is not recognized");		screen.click(Win_saveBTN);		Thread.sleep(2000);		logger(Test, "Actual print is saved", "I");	}	@SuppressWarnings("static-access")	public static void macPrint(String TC_Name)			throws JDOMException, IOException, InterruptedException, AWTException, FindFailed {		Generic.setCurrentTestBaselinePath("TC_print");		Pattern saveASBTN = new Pattern(Web.getImageElement("macCH_saveBTN"));		Pattern gotoTHEfolder = new Pattern(Web.getImageElement("mac_fileName"));		Pattern goBTN = new Pattern(Web.getImageElement("mac_go"));		Pattern save1BTN = new Pattern(Web.getImageElement("Mac_FF_Save"));		Pattern oKBTN = new Pattern(Web.getImageElement("Mac_FF_OK"));		Pattern pdfBTN = new Pattern(Web.getImageElement("Mac_FF_PDFDrop"));		Pattern SaveASPDF = new Pattern(Web.getImageElement("Mac_FF_SaveAsPDF"));		Pattern Mac_saveBTN = new Pattern(Web.getImageElement("mac_saveBTN"));		Pattern macFF_OkBtn = new Pattern(Web.getImageElement("Mac_FF_OK"));		Pattern macFF_PdfDropBtn = new Pattern(Web.getImageElement("Mac_FF_PDFDrop"));		Pattern macFF_SaveBtn = new Pattern(Web.getImageElement("Mac_FF_Save"));		Pattern macFF_SaveAsPdfBtn = new Pattern(Web.getImageElement("Mac_FF_SaveAsPDF"));		Pattern macFF_TxtRnmBtn = new Pattern(Web.getImageElement("Mac_FF_TextRenameUntitled"));		Thread.sleep(1000);		Screen screen = new Screen();		String locationName = null;		String BRname = currentBR();		if (BRname.contains("chrome") || BRname.contains("opera")) {			Pattern macChangeBTN=new Pattern(Web.getImageElement("macCH_ChangeBTN"));			Pattern Save_as_PDF=new Pattern(Web.getImageElement("macCH_Save_as_PDF"));			Pattern saveBTN=new Pattern(Web.getImageElement("macCH_saveBTN"));			Pattern goPathBTN=new Pattern(Web.getImageElement("macCH_goBTN"));			Thread.sleep(1000);			System.out.println("Looking for chnage button");			Match match=screen.exists(macChangeBTN);			Assert.assertNotNull(match, " 'Mac Print' macCH_ChangeBTN BTN is not recognize ");			screen.click(match);			Thread.sleep(2000);			Match match1=screen.exists(Save_as_PDF);			Assert.assertNotNull(match1, " 'Mac Print' macCH_Save_as_PDF  BTN is not recognized ");			screen.click(match1);			Thread.sleep(3000);			Match match2=screen.exists(saveBTN);			Assert.assertNotNull(match2, " 'Mac Print' Save BTN is not recognized ");			screen.click(saveBTN);			Thread.sleep(2000);			locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator)					.getAbsolutePath();			System.out.println("Lname " + locationName);			Thread.sleep(1000);			System.out.println("I am Here!!!1");			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			Thread.sleep(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_META);			MyRobot.getInstance().keyPress(KeyEvent.VK_SHIFT);			MyRobot.getInstance().keyPress(KeyEvent.VK_G);			MyRobot.getInstance().keyRelease(KeyEvent.VK_G);			MyRobot.getInstance().keyRelease(KeyEvent.VK_SHIFT);			MyRobot.getInstance().keyRelease(KeyEvent.VK_META);			Thread.sleep(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().keyRelease(KeyEvent.VK_BACK_SPACE);			Thread.sleep(2000);			screen.type(locationName);			Thread.sleep(2000);			Match match4 = screen.exists(goBTN);			Assert.assertNotNull(match4, " '" + BRname + " Print Mac' Go BTN is not recognized ");			screen.click(goBTN);			Thread.sleep(1000);			//Match match3 = screen.exists(gotoTHEfolder);			//Assert.assertNotNull(match3, " '" + BRname + " Print Mac' Goto the folder option is not recognized ");			//screen.click(gotoTHEfolder);			//Thread.sleep(1000);			MyRobot.getInstance().mousePress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().mouseRelease(KeyEvent.VK_BACK_SPACE);			Thread.sleep(1000);			//	TC_Name + ".pdf"			screen.type(TC_Name+".pdf");			Thread.sleep(1000);			Match match6 = screen.exists(save1BTN);			Assert.assertNotNull(match6, " '" + BRname + " Print Mac' last Save BTN  is not recognized ");			screen.click(save1BTN);			Thread.sleep(1000);		} else if (BRname.contains("safari") || BRname.contains("firefox")) {			Match match = screen.exists(oKBTN);			Assert.assertNotNull(match, " '" + BRname + " Print on Mac' OK BTN is not recognize ");			screen.click(oKBTN);			Thread.sleep(2000);			Match match1 = screen.exists(pdfBTN);			Assert.assertNotNull(match1, " '" + BRname + " Print on Mac' PDF BTN is not recognize ");			screen.click(pdfBTN);			Thread.sleep(2000);			Match match2 = screen.exists(SaveASPDF);			Assert.assertNotNull(match2, " '" + BRname + " Print on Mac' Save AS PDF  is not recognize ");			screen.click(SaveASPDF);			Thread.sleep(2000);			/*MyRobot.getInstance().keyPress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().keyRelease(KeyEvent.VK_BACK_SPACE);			Thread.sleep(2000);			MyRobot.getInstance().keyPress(KeyEvent.VK_SLASH);			MyRobot.getInstance().keyRelease(KeyEvent.VK_SLASH);			Thread.sleep(2000);			 */			Thread.sleep(500);			/*locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TC_Name + ".pdf")					.getAbsolutePath();			 */			// new code for mac			locationName = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator)					.getAbsolutePath();			System.out.println("Lname " + locationName);			Thread.sleep(1000);			Thread.sleep(1000);			System.out.println("I am Here!!!1");			StringSelection stringSelection = new StringSelection(locationName);			Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();			clipboard.setContents(stringSelection, stringSelection);			System.out.println("locationName: " + locationName);			Thread.sleep(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_META);			MyRobot.getInstance().keyPress(KeyEvent.VK_SHIFT);			MyRobot.getInstance().keyPress(KeyEvent.VK_G);			MyRobot.getInstance().keyRelease(KeyEvent.VK_G);			MyRobot.getInstance().keyRelease(KeyEvent.VK_SHIFT);			MyRobot.getInstance().keyRelease(KeyEvent.VK_META);			Thread.sleep(1000);			MyRobot.getInstance().keyPress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().keyRelease(KeyEvent.VK_BACK_SPACE);			Thread.sleep(2000);			screen.type(locationName);			Thread.sleep(2000);			Match match4 = screen.exists(goBTN);			Assert.assertNotNull(match4, " '" + BRname + " Print Mac' Go BTN is not recognized ");			screen.click(goBTN);			Thread.sleep(1000);			//Match match3 = screen.exists(gotoTHEfolder);			//Assert.assertNotNull(match3, " '" + BRname + " Print Mac' Goto the folder option is not recognized ");			//screen.click(gotoTHEfolder);			//Thread.sleep(1000);			MyRobot.getInstance().mousePress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().mouseRelease(KeyEvent.VK_BACK_SPACE);			Thread.sleep(1000);			//	TC_Name + ".pdf"			screen.type(TC_Name+".pdf");			Thread.sleep(1000);			Match match6 = screen.exists(save1BTN);			Assert.assertNotNull(match6, " '" + BRname + " Print Mac' last Save BTN  is not recognized ");			screen.click(save1BTN);			/// previous code 10 oct 2017			/*			MyRobot.getInstance().keyPress(KeyEvent.VK_META);			MyRobot.getInstance().keyPress(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_V);			MyRobot.getInstance().keyRelease(KeyEvent.VK_META);			Match match3 = screen.exists(gotoTHEfolder);			Assert.assertNotNull(match3, " '" + BRname + " Print Mac' Goto the folder option is not recognized ");			screen.click(gotoTHEfolder);			Thread.sleep(1000);			MyRobot.getInstance().mousePress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().mouseRelease(KeyEvent.VK_BACK_SPACE);			screen.type(gotoTHEfolder, new File("actualIMAGE/print").getAbsolutePath());			Thread.sleep(1000);			Thread.sleep(1000);			Match match5 = screen.exists(saveASBTN);			Assert.assertNotNull(match5, " '" + BRname + " Print Mac' Go BTN is not recognized ");			screen.click(saveASBTN);			Thread.sleep(500);			screen.doubleClick(saveASBTN);			MyRobot.getInstance().mousePress(KeyEvent.VK_BACK_SPACE);			MyRobot.getInstance().mouseRelease(KeyEvent.VK_BACK_SPACE);			screen.type(saveASBTN, TC_Name);			Thread.sleep(1000);		//	Match match6 = screen.exists(save1BTN);			//Assert.assertNotNull(match6, " '" + BRname + " Print Mac' last Save BTN  is not recognized ");			//screen.click(save1BTN);			 */				}	}	public static void launchSave_Print(String TCID) throws InterruptedException {		Thread.sleep(2000);		/*	String osName = currentOS();		String Val = new File(				Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TCID + ".pdf")				.getAbsolutePath();		if (osName.contains("MAC") || osName.contains("mac")) {			if (currentBR().contains("chrome") || currentBR().contains("opera")) {				 Val = new File("actualIMAGE/print/" + TCID + ".pdf").getAbsolutePath();				Driver.get("file://" + Val);			} else {				 Val = new File("actualIMAGE/print/" + TCID + ".pdf").getAbsolutePath();				System.setProperty("webdriver.chrome.driver",						"/Users/labuser/Desktop/HTMLworkspace/sikuliProject/driver/chromedriver");				Driver = new ChromeDriver();				Driver.get("file://" + Val);			}		} else {			if (currentBR().contains("chrome")) {				 Val = new File(						Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TCID + ".pdf")						.getAbsolutePath();				Driver.get("file://" + Val);				Thread.sleep(2000);				logger(Test, "Actual Print is launched on chrome Browser", "I");			} else if (currentBR().contains("internet explorer")) {				Driver.get(new File("actualIMAGE/print/" + TCID + ".xps").getAbsolutePath());				logger(Test, "Actual Print is launched on IE browser ", "I");			}*/		if (currentBR().contains("edge") ) {			String Val = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TCID + ".pdf")					.getAbsolutePath();			Driver.get("https://www.google.co.in/");			Thread.sleep(1000);			Driver.get(new File(Val).getAbsolutePath());			Thread.sleep(2000);		}else if (currentBR().contains("firefox") ) {			String Val = new File(					Generic.getOutputPath() + File.separator + "Screenshot" + File.separator + TCID + ".pdf")					.getAbsolutePath();			Driver.get("https://www.google.co.in/");			Thread.sleep(500);			Driver.get("file://" + Val);			Thread.sleep(1000);		}	}	public static void pdfMatcher(String TC_Name) throws InterruptedException, IOException {		Thread.sleep(2000);		PDFUtil pdfUtil = new PDFUtil();		String locationName = null;		locationName=new File(Generic.getOutputPath()+File.separator+"Screenshot"+File.separator+TC_Name+".pdf").getAbsolutePath();		pdfUtil.getPageCount(locationName);		String file1=locationName;		System.out.println("file1 "+file1);		String file2=Generic.getCurrentTestBaselinePath()+File.separator+TC_Name+".pdf";		System.out.println("file2 "+file2);		logger(Test, "Comparing File1:"+file1+"\nFile2:"+file2, "I");		pdfUtil.setCompareMode(CompareMode.VISUAL_MODE);		boolean flag = pdfUtil.compare(file1, file2);		if(flag==false){			logger(Test, "Print Not Matched Successfully !!", "F");		}else{			Assert.assertTrue(flag,"Compare Flag found false- PDF's are not matched as expected");			logger(Test, "Print PDF's Compared Successfully !!", "I");		}	}	// End of Print functions.	// Function to capture and save Image using Sikuli.	public static String getActualSnapper(Screen screen, String TC_Name, int x, int y, int w, int h, String name)			throws IOException, InterruptedException {		ScreenImage captureImg = screen.capture(x, y, w, h);		String actImagePath = Generic.getOutputPath() + File.separator + "actualIMAGE" + File.separator + "tc_Images"				+ File.separator + TC_Name + File.separator + name + ".png";		File folderLocation = new File(Generic.getOutputPath() + System.getProperty("file.separator") + File.separator				+ "actualIMAGE" + File.separator + "tc_Images" + File.separator + TC_Name);		folderLocation.mkdirs();		System.out.println("TC_Name" + TC_Name);		System.out.println("Captured at:" + actImagePath);		ImageIO.write(captureImg.getImage(), "png", new File(actImagePath));		Thread.sleep(1000);		return actImagePath;	}	// End	// Predecessor of getActualSnapper	public static String getActualSnap(Screen screen, String TC_Name, int x, int y, int w, int h)			throws IOException, InterruptedException {		String fileName = capture(screen, TC_Name, x, y, w, h);		Thread.sleep(1000);		String actFile = findFile(fileName, TC_Name);		return actFile;	}	public static String capture(Screen screen, String TC_Name, int x, int y, int w, int h) {		ScreenImage captureImg = screen.capture(x, y, w, h);		String actImagePath = Generic.getOutputPath() + File.separator + "actualIMAGE" + File.separator + "tc_Images";		System.out.println("TC_Name" + TC_Name);		System.out.println("Captured at:" + actImagePath);		captureImg.save(actImagePath, TC_Name);		return actImagePath;	}	// Function that captures the image using Selenium.	public static String getSeleniumSnap(WebElement ele, String ID, String name) throws InterruptedException {		Thread.sleep(1000);		System.out.println("Ele found");		String actImagePath = Generic.getOutputPath() + File.separator + "actualIMAGE" + File.separator + "tc_Images"				+ File.separator + ID + File.separator + name + ".png";		File folderLocation = new File(Generic.getOutputPath() + System.getProperty("file.separator") + File.separator				+ "actualIMAGE" + File.separator + "tc_Images" + File.separator + ID);		folderLocation.mkdirs();		// Get entire page screenshot		File screenshot = ((TakesScreenshot) Driver).getScreenshotAs(OutputType.FILE);		BufferedImage fullImg;		Point point;		try {			fullImg = ImageIO.read(screenshot);			if (CURRENTBROWSER.equals("ie")) {				point = ((Locatable) ele).getCoordinates().inViewPort();			}else{				point = ((Locatable) ele).getCoordinates().inViewPort();				// Point point = ele.getLocation();			}			// Get width and height of the element			int eleWidth = ele.getSize().getWidth();			int eleHeight = ele.getSize().getHeight();			if (CURRENTBROWSER.equals("firefox")) {				Rectangle rectArea = new Rectangle(point.getX(), (point.getY() - Generic.getYOffset()), eleWidth,						eleHeight);				BufferedImage screenFullImage = MyRobot.getInstance().createScreenCapture(rectArea);				ImageIO.write(screenFullImage, "png", screenshot);				System.out.println("Using Offsets to Capture Images!!!");			} else {				// Crop the entire page screenshot to get only element				// screenshot				BufferedImage eleScreenshot = fullImg.getSubimage(point.getX(), point.getY(), eleWidth, eleHeight);				ImageIO.write(eleScreenshot, "png", screenshot);			}			// Copy the element screenshot to disk			File screenshotLocation = new File(actImagePath);			FileUtils.copyFile(screenshot, screenshotLocation);		} catch (IOException e) {			System.out.println("Could not Take ScreenShot Using Selenium!!!!!");			e.printStackTrace();		}		// Get the location of element on the page		logger(Test, "Image Captured for Image:" + actImagePath, "I");		return actImagePath;		// point.inViewPort();		// Point p = ((Locatable)ele).getCoordinates().inViewPort();	}	// End of Capturing Snaps.	// Finds the path of the actualImage that is to be matched with expected	// image	// No longer used.	public static String findFile(String fileName, String TC_Name) {		String fileN = null;		String actFile = null;		File folder = new File(fileName);		File[] listOfFiles = folder.listFiles();		for (File file : listOfFiles) {			if (file.isFile()) {				fileN = file.getName();				if (fileN.contains(TC_Name)) {					actFile = file.getAbsolutePath();					return actFile;				}			} else {				Assert.assertTrue(false, "Actual snap does't exist on location");			}		}		return actFile;	}	// Utility function to Perform right click on any element	public static void rightClick(WebElement element) {		try {			Actions action = new Actions(Driver).contextClick(element);			action.build().perform();			System.out.println("Sucessfully Right clicked on the element");		} catch (StaleElementReferenceException e) {			System.out.println("Element is not attached to the page document " + e.getStackTrace());		} catch (NoSuchElementException e) {			System.out.println("Element " + element + " was not found in DOM " + e.getStackTrace());		} catch (Exception e) {			System.out.println("Element " + element + " was not clickable " + e.getStackTrace());		}	}	///////////// objectComposition///////////////	public static class GenericChild {		public static WebUtill webUtill() {			Web = new WebUtill();			return Web;		}		public static DataHandler xml() {			Xml = new DataHandler();			return Xml;		}	}	// End	// Utility functions for Opening and closing of Notepad.	public static void NotepadOpen() {		Runtime rs = Runtime.getRuntime();		try {			process = rs.exec("notepad");		} catch (IOException e) {			System.out.println(e);		}	}	public static void NotepadClose() {		try {			process.destroy();		} catch (Exception e) {			System.out.println(e);		}	}	// End	// Function to check if the page is one which we want to load.(Compares	// title of the Window)	public static void titleMatch(String title) throws FindFailed, IOException, InterruptedException {		Thread.sleep(500);		logger(Test, "URL is Enter", "I");		Assert.assertTrue(Driver.getTitle().contains(title),				"Actual Page title:- " + Driver.getTitle() + " doesn't match with expected:-" + title);		logger(Test, "BR title is matched", "I");	}	// End	// Used in earlier version. Deprecated.	@SuppressWarnings("static-access")	public static String imageFinder(String image) throws FindFailed, IOException, InterruptedException {		String expImage = Web.getImageElement(image);		logger(Test, "Looking for image located at :" + expImage, "I");		return expImage;	}	// Click on an image using Sikuli.	public static void objClick(Screen screen, String expImage, WebElement ele)			throws FindFailed, IOException, InterruptedException, AWTException {		Thread.sleep(1000);		logger(Test, "Looking for image to perform click located at :" + expImage, "I");		Pattern pObj2 = new Pattern(expImage);		screen.find(pObj2);		screen.wait(pObj2);		String OS = Generic.currentOS();		if (OS.contains("mac1")) {			Match match1 = screen.exists(pObj2);			System.out.println("match found for click object :" + match1);			Actions builder = new Actions(Driver);			builder.moveToElement(ele, match1.getCenter().getX(), match1.getCenter().getY() - 60).click().build()			.perform();			System.out.println("Sikuli co ordinates: " + match1 + ": X :" + match1.getX() + " :  Y :" + match1.getY()			+ "   :  H : " + match1.getH() + " : W : " + match1.getW() + ": Center : " + match1.getCenter());			logger(Test, "Click is performed Successfully : " + expImage, "I");			Thread.sleep(500);		} else {			screen.click(pObj2);			Thread.sleep(1000);			logger(Test, "Click is performed Successfully : " + expImage, "I");		}	}	// Scroll to particular image using Sikuli	public static void objScroll(Screen screen, String expImage, WebElement ele)			throws FindFailed, IOException, InterruptedException, AWTException {		Thread.sleep(1000);		logger(Test, "Looking for image to perform click located at :" + expImage, "I");		Pattern pObj2 = new Pattern(expImage);		screen.find(pObj2);		screen.wait(pObj2);		screen.click(pObj2);		if(CURRENTOS.equals("mac")){			Thread.sleep(1000);			MyRobot.getInstance().mouseWheel(-50);		}		else{			Thread.sleep(1000);			screen.wheel(10, 10);		}		logger(Test, "Click is performed Successfully : " + expImage, "I");	}	// Right click using Sikuli	public static void objContextClick(Screen screen, String expImage, WebElement ele)			throws FindFailed, IOException, InterruptedException, AWTException {		Thread.sleep(500);		logger(Test, "Looking for image to perform click located at :" + expImage, "I");		Pattern pObj2 = new Pattern(expImage);		screen.find(pObj2);		screen.wait(pObj2);		String OS = Generic.currentOS();		if (OS.contains("mac1")) {			Match match1 = screen.exists(pObj2);			System.out.println("match found for click object :" + match1);			Actions builder = new Actions(Driver);			builder.moveToElement(ele, match1.getCenter().getX(), match1.getCenter().getY() - 60).contextClick().build()			.perform();			System.out.println("Sikuli co ordinates: " + match1 + ": X :" + match1.getX() + " :  Y :" + match1.getY()			+ "   :  H : " + match1.getH() + " : W : " + match1.getW() + ": Center : " + match1.getCenter());			logger(Test, "Click is performed Successfully : " + expImage, "I");			Thread.sleep(500);		} else {			screen.rightClick(pObj2);			logger(Test, "Click is performed Successfully : " + expImage, "I");		}	}	// Function to check if the image is present on Screen.Deprecated.	/*public static List<Object> Matcher(Screen screen, String TestCase, String expImage, WebElement ele,			String ImageName) throws FindFailed, IOException, InterruptedException {		List<Object> list = new ArrayList<Object>();		Pattern pObj = new Pattern(expImage);		Thread.sleep(500);		logger(Test, "Looking for match of " + expImage, "I");		Match match = screen.exists(pObj);		if (match == null) {			capturedImg = getSeleniumSnap(ele, TestCase, ImageName);			logger(Test, "\n\n Match Found Null for image" + expImage + ", Please refer the image at:" + capturedImg,					"F");			System.out.println(					"\n\n Match Found Null for image" + expImage + ", Please refer the image at:" + capturedImg);		} else {			System.out.println("\nMatch Found : " + match + " for image" + expImage);			logger(Test, "Match Completed for" + expImage, "I");		}		list.add(match);		list.add(capturedImg);		return list;	}*/	// Match and capture a particular on Screen using Sikuli and return the path	// of the captured image.Active.	public static String printMatcher(Screen screen, String TC_Name, String baseImage, String name)			throws FindFailed, IOException, InterruptedException {		Pattern pObj = new Pattern(baseImage);		Match match = screen.exists(pObj);		Assert.assertNotNull(match, "BaseLine Image is not matched from saved PDF");		int x = match.getX();		int y = match.getY();		int h = match.getH();		int w = match.getW();		System.out.println(x + " " + y + " " + h + " " + w);		Thread.sleep(500);		capturedImg = getActualSnapper(screen, TC_Name, x, y, w, h, name);		logger(Test, "Actual Snap is captured", "I");		return capturedImg;	}	// Final Validation of Actual Image with Expected Image.	@SuppressWarnings("static-access")	public static String imageMatcher(String baseImage, String captImage)			throws FindFailed, IOException, InterruptedException {		logger(Test, "Looking for expected baseline image located at :" + baseImage, "I");		logger(Test, "Looking for captured image located at :" + captImage, "I");		Thread.sleep(500);		boolean testPass = new Imagetest().compare(baseImage, captImage);		Assert.assertTrue(testPass, "TestCase Fails");		logger(Test, "Image Matched Successfully for Image:" + baseImage, "I");		return captImage;	}	// Utility for TC#16518 TC#16713	@SuppressWarnings("static-access")	public int utility(String linktext, String ID, String TCID) throws InterruptedException, IOException {		boolean testPass;		Driver.findElement(By.linkText(linktext)).click();		logger(Test, "Clicked on " + linktext, "I");		Thread.sleep(500);		WebElement ele = Driver.findElement(Web.getWebElement(linktext));		ele.click();		String expImage = Web.getImageElement(linktext);		String actImagePath = Generic.getSeleniumSnap(ele, TCID, linktext);		logger(Test, "Actual Snap is captured at " + actImagePath, "I");		testPass = new Imagetest().compare(expImage, actImagePath);		if (testPass) {			logger(Test, "Test" + ID + ": Pass", "I");			return 1;		} else {			Generic.appendxml(expImage, actImagePath, TCID);			logger(Test, "Test" + ID + ": Fail", "F");			return 0;		}	}	public void Scroller(String ele) throws InterruptedException {		WebElement ScrollToNext = Driver.findElement(By.linkText(ele));		((JavascriptExecutor) Driver).executeScript("arguments[0].scrollIntoView(true);", ScrollToNext);		Thread.sleep(500);	}	// End	// This function downloads the baseline specific to current OS-Browser from	// a HTTP location	public static void downloadDirectory(String remoteDir, String saveDir) throws IOException {		try {			Document doc = Jsoup.connect(remoteDir).get();			Elements links = doc.getElementsByTag("a");			for (Element link : links) {				if (link.text().contains("To Parent Directory")) {					continue;				}				if (link.text().contains(".")) {					boolean success = downloadSingleFile(remoteDir + "/" + link.text(),							saveDir + File.separator + link.text());					if (success) {						System.out.println("DOWNLOADED the file: " + saveDir + File.separator + link.text());					} else {						System.out.println("COULD NOT download the file: " + saveDir + File.separator + link.text());					}				} else {					System.out.println("From:" + remoteDir + "/" + link.text());					System.out.println("To:" + saveDir + File.separator + link.text());					System.out.println("LInk:" + link.text());					downloadDirectory(remoteDir + "/" + link.text(), saveDir + File.separator + link.text());				}				System.out.println(link.attr("href") + " - " + link.text());			}		} catch (IOException ex) {			ex.printStackTrace();		}		System.out.println("Completed!!!");	}	public static boolean downloadSingleFile(String remoteFilePath, String savePath) throws IOException {		File downloadFile = new File(savePath);		File parentDir = downloadFile.getParentFile();		if (!parentDir.exists()) {			parentDir.mkdir();		}		try {			System.out.println("From: " + remoteFilePath);			System.out.println("To: " + savePath);			FileUtils.copyURLToFile(new URL(remoteFilePath), new File(savePath));			return true;		} catch (Exception e) {			System.out.println(e.getMessage());			return false;		}	}	// Function to push Captured Images onto server.	public String pushFileToServer(String content, String fType) {		try {			Object[] params = new Object[] {};			File fileToPost = new File(content);			File parentDir = fileToPost.getParentFile();			String target = "";			if (fType.equals("FailureBitmaps")) {				target = "http://fpqa.macromedia.com/Ullu/NeedsHTMLValidation/act_upload_html_bitmaps.cfm";				params = new Object[] { "fileContents", fileToPost, "fileName", fileToPost.getName(), "runID",						Generic.getTofuRunID(), "testID", parentDir.getName() };				ClientHttpRequest.post(new URL(target), params);				return "http://fpqa.macromedia.com/Ullu/NeedsHTMLValidation/" + Generic.getTofuRunID()				+ "/HTML_BITMAPS/" + parentDir.getName() + "/" + fileToPost.getName();			}			// Summary of results posted to a log - same info as in the email			else if (fType.equals("Xml")) {				target = "http://fpqa.macromedia.com/Ullu/NeedsHTMLValidation/act_upload_html_logs.cfm";				params = new Object[] { "fileContents", fileToPost, "fileName", fileToPost.getName(), "runID",						Generic.getTofuRunID() };				ClientHttpRequest.post(new URL(target), params);				return "http://fpqa.macromedia.com/Ullu/NeedsHTMLValidation/" + Generic.getTofuRunID()				+ "/HTML_LOGS/Html.xml";			} else if (fType.equals("Others")) {				target = "http://fpqa.macromedia.com/Tofu/act_upload_html_logs.cfm";				params = new Object[] { "fileContents", fileToPost, "fileName", fileToPost.getName(), "runID",						Generic.getTofuRunID(), "buildID", Generic.getBuildName() };				ClientHttpRequest.post(new URL(target), params);				return "http://fpqa.macromedia.com/Tofu/HTML_logs/" + Generic.getBuildName() + "/"				+ Generic.getTofuRunID() + "/" + fileToPost.getName();			} else {				System.out.println("Invalid Push Type!!!");				return null;			}		} catch (Exception e) {			System.out.println("Could Not Post the FIles!!!!!!! " + content);			return null;		}	}	// End	// Offset is calculated for Firefox as Selenium captures blank images for	// Flash. Selenium.Coordinate-Sikuli.Coordinate	public static void setOffset(int x, int y) {		xOffset = x;		yOffset = y;	}	public static int getXOffset() {		return xOffset;	}	public static int getYOffset() {		return yOffset;	}	// End}